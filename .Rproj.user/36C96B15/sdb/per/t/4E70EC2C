{
    "collab_server" : "",
    "contents" : "#' This function is from the 'proxysnps' package available at\n#' \\url{https://github.com/slowkow/proxysnps/blob/master/R/get_vcf.R}\n#'\n#' Get data for a genomic region from a remote VCF file.\n#'\n#' Returns a list with three dataframes for individuals, SNPs, and genotypes.\n#'\n#' Currently, this is hard-coded to access 1000 Genomes phase3 data hosted by\n#' Brian Browning (author of BEAGLE):\n#'\n#' \\url{http://bochet.gcc.biostat.washington.edu/beagle/1000_Genomes_phase3_v5a/}\n#'\n#' This implementation discards multi-allelic markers that have a \",\" in the\n#' ALT column.\n#'\n#' The \\code{pop} can be any of: ACB, ASW, BEB, CDX, CEU, CHB, CHS, CLM, ESN,\n#' FIN, GBR, GIH, GWD, IBS, ITU, JPT, KHV, LWK, MSL, MXL, PEL, PJL, PUR, STU,\n#' TSI, YRI. It can also be any super-population: AFR, AMR, EAS, EUR, SAS.\n#'\n#' Find more details here:\n#' \\url{http://www.1000genomes.org/faq/which-populations-are-part-your-study}\n#'\n#' @param chrom a chromosome name (1-22,X) without \"chr\"\n#' @param start a positive integer indicating the start of a genomic region\n#' @param end a positive integer indicating the end of a genomic region\n#' @param pop the name of a 1000 Genomes population (AMR,AFR,ASN,EUR,...)\n#' @return A list with three dataframes:\n#' \\describe{\n#'   \\item{ind}{A dataframe with information about individuals: Family.ID,\n#'    Individual.ID, Paternal.ID, Maternal.ID, Gender, Population,\n#'    Relationship, Siblings, Second.Order, Third.Order, Other.Comments,\n#'    SuperPopulation}\n#'   \\item{meta}{First 8 columns of the VCF file: CHROM, POS, ID, REF, ALT,\n#'    QUAL, FILTER, INFO}\n#'   \\item{geno}{Columns 10 onward of the VCF file. All genotypes are converted\n#'    to 0s and 1s representing REF and ALT alleles. This dataframe has two\n#'    columns for each individual.}\n#' }\n#'\n#' @examples\n#' vcf <- get_vcf(chrom = \"12\", start = 533090, end = 623090, pop = \"AFR\")\n#' names(vcf)\n#'\n#' @export\n\nget_vcf <- function(chrom, start, end, pop = NA) {\n\n  # Hard-coded superpopulations for each individual.\n  superpops <- rep(\n    c(\"EUR\",\"EAS\",\"AMR\",\"EAS\",\"AMR\",\"EAS\",\"AMR\",\"EAS\",\"AMR\",\"EUR\",\"AMR\",\n      \"EUR\",\"AMR\",\"SAS\",\"EAS\",\"EUR\",\"EAS\",\"AFR\",\"AMR\",\"AFR\",\"AMR\",\"AFR\",\n      \"AMR\",\"AFR\",\"AMR\",\"AFR\",\"EAS\",\"AFR\",\"EAS\",\"AMR\",\"AFR\",\"AMR\",\"AFR\",\n      \"EAS\",\"AFR\",\"AMR\",\"EAS\",\"EUR\",\"EAS\",\"AMR\",\"AFR\",\"AMR\",\"AFR\",\"AMR\",\n      \"AFR\",\"AMR\",\"AFR\",\"AMR\",\"EAS\",\"AFR\",\"AMR\",\"AFR\",\"SAS\",\"AFR\",\"EAS\",\n      \"AFR\",\"SAS\",\"AFR\",\"SAS\",\"AFR\",\"SAS\",\"AFR\",\"SAS\",\"AFR\",\"SAS\",\"AFR\",\n      \"SAS\",\"AFR\",\"SAS\",\"AFR\",\"SAS\",\"AFR\",\"SAS\",\"EUR\",\"AFR\",\"EAS\",\"AFR\",\n      \"EAS\",\"AFR\",\"EAS\",\"AFR\",\"AMR\",\"AFR\",\"AMR\",\"AFR\",\"EUR\",\"SAS\"),\n    c(185,42,3,35,4,28,9,15,111,1,68,24,9,4,6,73,56,8,2,5,24,2,13,5,7,5,\n      17,4,21,2,1,3,3,17,2,3,20,14,1,2,2,11,4,8,3,1,13,2,35,2,1,22,4,7,\n      4,27,5,16,10,6,13,6,9,9,12,58,10,84,6,74,3,25,310,99,19,103,29,70,\n      18,34,142,19,8,45,52,107,103)\n  )\n\n  # Hard-coded populations for each individual.\n  pops <- rep(\n    c(\"GBR\",\"FIN\",\"GBR\",\"FIN\",\"CHS\",\"PUR\",\"CHS\",\"PUR\",\"CHS\",\"PUR\",\"CDX\",\"PUR\",\n      \"CLM\",\"PUR\",\"CLM\",\"PUR\",\"GBR\",\"CLM\",\"PUR\",\"CLM\",\"IBS\",\"CLM\",\"PEL\",\"PJL\",\n      \"KHV\",\"IBS\",\"GBR\",\"CDX\",\"KHV\",\"ACB\",\"PEL\",\"ACB\",\"PEL\",\"ACB\",\"PEL\",\"ACB\",\n      \"PEL\",\"ACB\",\"KHV\",\"ACB\",\"KHV\",\"PEL\",\"ACB\",\"PEL\",\"ACB\",\"KHV\",\"ACB\",\"PEL\",\n      \"CDX\",\"GBR\",\"IBS\",\"CDX\",\"PEL\",\"ACB\",\"PEL\",\"ACB\",\"PEL\",\"ACB\",\"PEL\",\"ACB\",\n      \"PEL\",\"CDX\",\"ACB\",\"PEL\",\"ACB\",\"GWD\",\"ACB\",\"PJL\",\"ACB\",\"KHV\",\"ACB\",\"GWD\",\n      \"ACB\",\"GWD\",\"PJL\",\"GWD\",\"PJL\",\"GWD\",\"PJL\",\"GWD\",\"PJL\",\"GWD\",\"PJL\",\"GWD\",\n      \"ESN\",\"GWD\",\"BEB\",\"PJL\",\"GWD\",\"MSL\",\"ESN\",\"MSL\",\"PJL\",\"GWD\",\"ESN\",\"MSL\",\n      \"PJL\",\"ESN\",\"GWD\",\"MSL\",\"BEB\",\"PJL\",\"STU\",\"PJL\",\"STU\",\"PJL\",\"STU\",\"ITU\",\n      \"STU\",\"ITU\",\"STU\",\"PJL\",\"ITU\",\"BEB\",\"STU\",\"ITU\",\"STU\",\"BEB\",\"STU\",\"ITU\",\n      \"STU\",\"ITU\",\"STU\",\"ITU\",\"STU\",\"ITU\",\"STU\",\"ITU\",\"STU\",\"ITU\",\"BEB\",\"ITU\",\n      \"STU\",\"ITU\",\"STU\",\"ITU\",\"CEU\",\"YRI\",\"CHB\",\"YRI\",\"JPT\",\"LWK\",\"JPT\",\"YRI\",\n      \"LWK\",\"ASW\",\"MXL\",\"ASW\",\"MXL\",\"ASW\",\"TSI\",\"GIH\"),\n    c(55,17,31,82,42,3,35,4,28,9,15,41,18,26,16,10,1,27,11,30,24,3,6,4,6,70,\n      3,22,34,8,2,5,24,2,13,5,7,5,17,4,21,2,1,3,3,17,2,3,20,1,13,1,2,2,11,4,\n      8,3,1,13,2,35,2,1,9,4,9,4,7,4,10,7,2,8,5,16,10,6,13,6,9,9,12,37,19,2,4,\n      6,10,27,43,4,6,6,29,39,3,8,2,15,13,8,5,7,19,6,1,11,5,1,12,3,20,20,13,15,\n      13,21,9,12,8,2,2,10,7,8,1,7,4,1,28,5,1,7,2,3,99,19,103,29,70,18,34,60,\n      81,1,19,8,45,52,107,103)\n  )\n\n  if (!is.na(pop) && !pop %in% pops && !pop %in% superpops && pop != \"ALL\") {\n    stop(\n      \"Invalid pop=\", pop,\n      \"\\nMust be a pop: \", paste(unique(pops), collapse = \" \"),\n      \"\\nOr a superpop: \", paste(unique(superpops), collapse = \" \")\n    )\n  }\n\n  if (!is.numeric(start) || start < 1) {\n    stop(\"Invalid start=\", start, \"\\nMust be a positive integer.\")\n  }\n\n  if (!is.numeric(end) || end < start) {\n    stop(\"Invalid end=\", end, \"\\nMust be an integer >= start.\")\n  }\n\n  if (!chrom %in% c(1:22, \"X\")) {\n    stop(\n      \"Invalid chrom=\", chrom,\n      \"\\nMust be one of: \", paste(c(1:22, \"X\"), collapse = \" \")\n    )\n  }\n\n  # These are variants filtered by Brian Browning, the developer of BEAGLE.\n  data_url = paste(sep = \"\",\n                   \"http://tabix.iobio.io/?cmd=-h%20%27\",\n                   \"http://bochet.gcc.biostat.washington.edu/beagle/1000_Genomes_phase3_v5a/\",\n                   \"individual_chromosomes/chr\", chrom, \".1kg.phase3.v5a.vcf.gz\",\n                   \"%27%20\", chrom, \":\", start, \"-\", end\n  )\n\n  # Download the data from the server.\n  txt <- RCurl::getURL(data_url)\n\n  # Extract the sample identifiers from the VCF header.\n  sample_ids <- strsplit(\n    # FIXME: Should detect number of comment lines.\n    # Get the 5th line and split it.\n    strsplit(txt, \"\\n\", fixed = TRUE)[[1]][5],\n    \"\\t\", fixed = TRUE\n  )[[1]]\n\n  # Discard the \"CHROM,POS,...,INFO,V9\" columns.\n  sample_ids <- sample_ids[10:length(sample_ids)]\n\n  # Read the body of the data into a dataframe.\n  vcf <- read.delim(\n    text = txt, header = FALSE, comment.char = \"#\", stringsAsFactors = FALSE)\n\n  # Assign the standard column names and sample identifiers.\n  colnames(vcf) <- c(\n    \"CHROM\", \"POS\", \"ID\", \"REF\", \"ALT\", \"QUAL\", \"FILTER\", \"INFO\", \"V9\",\n    sample_ids\n  )\n\n  # Discard multi-allelic markers.\n  vcf <- vcf[grep(\",\", vcf$ALT, invert = TRUE), ]\n\n  # Select the genotype columns that belong to a particular population.\n  if (pop %in% pops) {\n    vcf <- vcf[,c(rep(TRUE, 9), pops == pop)]\n  } else if (pop %in% superpops) {\n    vcf <- vcf[,c(rep(TRUE, 9), superpops == pop)]\n  }\n\n  retval <- list()\n\n  data(\"ind\", package=\"VarExp\", envir = environment())\n  retval$ind <- ind[colnames(vcf)[10:ncol(vcf)],]\n\n  # Separate the metadata from the genotypes.\n  retval$meta <- vcf[,1:8]\n  retval$geno <- vcf[,10:ncol(vcf)]\n\n  # Convert the genotypes to a numeric matrix.\n  retval$geno <- t(apply(retval$geno, 1, function(row) {\n    as.numeric(do.call(cbind, strsplit(row, \"|\", fixed = TRUE)))\n  }))\n\n  rownames(retval$geno) <- retval$meta$ID\n  colnames(retval$geno) <- rep(retval$ind$Individual.ID, each = 2)\n\n  return(retval)\n}\n",
    "created" : 1498751496411.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3830349552",
    "id" : "4E70EC2C",
    "lastKnownWriteTime" : 1499760971,
    "last_content_update" : 1499760971392,
    "path" : "~/Bureau/PACK_R/PACKAGE/VarExp/R/extraction_1KG.R",
    "project_path" : "R/extraction_1KG.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}